/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6.4/userguide/building_java_projects.html
 */

//buildscript {
//    repositories {
//        mavenCentral()
//        maven { url 'https://jitpack.io' }
//        maven {
//            url "https://plugins.gradle.org/m2/"
//        }
//    }
//    dependencies {
//        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.1'
//        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
//    }
//}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.spring.io/plugins-release' }
    maven { url 'https://jitpack.io' }
}

//mainClassName = 'org.tron.DBFork'

tasks.named('jar') {
    enabled = false
}

shadowJar {
    archiveBaseName.set('dbfork')
    archiveClassifier.set('')
    archiveVersion.set('')
    mergeServiceFiles()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.3-jre'

//    implementation 'com.github.tronprotocol.java-tron:framework:GreatVoyage-v4.7.7'
//    implementation 'com.github.tronprotocol.java-tron:framework:develop-d383177b53-1'
    implementation('com.github.tronprotocol.java-tron:framework:GreatVoyage-v4.7.7') {
        exclude group: 'com.fasterxml.jackson', module: 'jackson-bom'
    }
    implementation platform('com.fasterxml.jackson:jackson-bom:2.13.4')
//    implementation 'info.picocli:picocli:4.7.4'
//    annotationProcessor 'info.picocli:picocli-codegen:4.7.4'
    implementation group: 'info.picocli', name: 'picocli', version: '4.6.3'

//    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
//    implementation group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25'
//    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.9'
//
//    compileOnly 'org.projectlombok:lombok:1.18.12'
//    annotationProcessor 'org.projectlombok:lombok:1.18.12'
//    testCompileOnly 'org.projectlombok:lombok:1.18.12'
//    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}

application {
    // Define the main class for the application.
    mainClass = 'org.tron.DBFork'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'org.tron.DBFork'
        )
    }
}

checkstyle {
    toolVersion = '8.41'
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

task checkstyleDBForkMain(type: Checkstyle) {
    source 'src/main/java'
    include '**/*.java'
    exclude '**/generated/**'
    classpath = files()
    ignoreFailures = false
}

task checkstyleDBForkTest(type: Checkstyle) {
    source 'src/test/java'
    include '**/*.java'
    exclude '**/generated/**'
    classpath = files()
    ignoreFailures = false
}

check.dependsOn checkstyleDBForkMain, checkstyleDBForkTest

//tasks.withType(JavaCompile) {
//    options.annotationProcessorPath = configurations.annotationProcessor
//}

//tasks.withType(JavaExec) {
//    jvmArgs += '-Djavax.xml.accessExternalDTD=all'
//    jvmArgs += '-Djavax.xml.accessExternalSchema=all'
//}


